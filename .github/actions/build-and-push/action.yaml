name: 'Build and push'
description: 'Build docker image and push to repo'
inputs:
  aws-access-key-id:
    description: 'aws access key id'
    required: true
  aws-secret-access-key:
    description: 'aws secret access key'
    required: true
  aws-region:
    description: 'aws region'
    required: true
    default: 'us-east-2'
  env:
    description: 'environment'
runs:
  using: 'composite'
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: get image tag
      shell: bash
      run: echo "IMAGE_TAG=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: 'Build and push'
      if: ${{ inputs.env != '' }}
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/customers-api-demo:${{ inputs.env }}-${{ env.IMAGE_TAG }}
          ${{ steps.login-ecr.outputs.registry }}/customers-api-demo:${{ inputs.env }}-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: |
          linux/amd64

    - name: 'output'
      if: ${{ inputs.env != '' }}
      shell: bash
      run: echo "PUSHED_IMAGE=${{ steps.login-ecr.outputs.registry }}/customers-api-demo:${{ inputs.env }}-${{ env.IMAGE_TAG }}" >> "$GITHUB_ENV"

    - name: 'Build and push'
      if: ${{ inputs.env == '' }}
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/customers-api-demo:${{ env.IMAGE_TAG }}
          ${{ steps.login-ecr.outputs.registry }}/customers-api-demo:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: |
          linux/amd64

    - name: 'output'
      if: ${{ inputs.env == '' }}
      shell: bash
      run: echo "PUSHED_IMAGE=${{ steps.login-ecr.outputs.registry }}/customers-api-demo:${{ env.IMAGE_TAG }}" >> "$GITHUB_ENV"
